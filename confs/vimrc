" vimrc
" @author dogfooter
" @email dogfooter219@gmail.com
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set shell=/bin/zsh

"My Custom Installed Plugins
" Plugin with vim-plug
call plug#begin('~/.vim/plugged')

" basic
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/tComment'
Plug 'vim-airline/vim-airline'
" Plug 'vim-syntastic/syntastic'


" snipet
" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'tomtom/tlib_vim'
" Plug 'garbas/vim-snipmate'


" C++
" Plug 'vhdirk/vim-cmake'

"
" Web
" Plug 'mattn/emmet-vim'
" Plug 'leafgarland/typescript-vim'
" Plug 'magarcia/vim-angular2-snippets'
" Plug 'honza/vim-snippets'
" Plug 'pangloss/vim-javascript'
" Plug 'jelera/vim-javascript-syntax', {'for': ['.js']}

" Vue
" Plug 'posva/vim-vue'

"
" python
" Plug 'davidhalter/jedi-vim' " for python autocomplete
" Plug 'nvie/vim-flake8'

" 
" Golang
" Plug 'fatih/vim-go'
" 
" option (not for other's PC)
" Plug 'Valloric/YouCompleteMe' 
" Plug 'Shougo/neocomplete.vim'

" Scala

" Git
" Plug 'airblade/vim-gitgutter'

" theme
" Plug 'dracula/vim'
" Plug 'altercation/vim-colors-solarized'


" my-own
Plug 'dogfooter/FIP.vim'


call plug#end()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Editor Setting

set bs=2 " for delete with backspace 
set nocompatible " only vIM
set autoindent
set cindent
set smartindent 
set number
set relativenumber 
let python_highlight_all=1
syntax on
" set background=light
set background=dark
" colorscheme solarized
" color dracula
" colorscheme Tomorrow-Night
set ts=4
set shiftwidth=4
set expandtab 
set hlsearch
set ignorecase

set t_Co=256

" for ignore mouse
set mouse=

" start with end of work
" https://medium.com/sunhyoups-story/vim-%EC%97%90%EB%94%94%ED%84%B0-%EC%9D%B4%EC%81%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-5b6b8d546017#.m38vbbsy0
au BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \ exe "norm g`\"" |
            \ endif


" current Cursor line highlight
" set cursorline
" hi cursorline cterm=none ctermbg=Black
" autocmd InsertEnter * highlight  CursorLine cterm=none ctermbg=Black 
" autocmd InsertLeave * highlight  CursorLine cterm=none ctermbg=Black 

let g:user_emmet_expandabbr_key = '<c-e>'


set laststatus=2
set statusline=\ %<%l:%v\ [%P]%=%a\ %h%m%r\ %F\
set visualbell
set t_vb=
set foldmethod=syntax  
set nofoldenable

" for omni completion file
" set autochdir

set noimd
set imi=1

filetype indent on
filetype plugin on 

autocmd FileType jade setlocal ts=2 sw=2

if has("mac") || has("macunix")
    set guifont=Monaco\ for\ Powerline:h24
elseif has("win32") || has("win64")
    set guifont=Monaco\ for\ Powerline:h14:cANSI
    set renderoptions=type:directx,renmode:5
endif

" set for vim-javascript 
let g:javascript_plugin_jsdoc = 1

" pep8 flake8
let g:flake8_cmd="/Library/Frameworks/Python.framework/Versions/2.7/bin/flake8"
let g:flake8_show_in_file=1   " show
let g:flake8_max_markers=500  " maximum # of markers to show(500 is default)
" autocmd BufWritePost *.py call Flake8()


" alrline tab
let g:airline#extensions#tabline#enabled = 1

" crontab vim enable
au FileType crontab setlocal bkc=yes

au FileType yaml setl sw=2 sts=2 et

"" for tag list"
" let Tlist_Use_Right_Window  =1

" ctags tag
set tags=tags

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H> 

"" my custom shortcut
nnoremap <F4> gg v G =
nnoremap <C-o><C-o> :NERDTreeToggle<CR>
nnoremap <C-o><C-f> :FZF<CR>

" for convinience
nnoremap ; :

command! Wq :wq
command! W :w
command! Q :q


function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader><Enter> :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>
